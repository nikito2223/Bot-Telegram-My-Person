from db_manager import DatabaseManager
from telegram import Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, ConversationHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
import mysql.connector
import os


db = DatabaseManager()
AVATAR, NAME, DESCRIPTION, HEALTH, ABILITIES, SKILLS, DAMAGE = range(7)

async def create(update: Update, context: CallbackContext):
    await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ê–≤–∞—Ç–∞—Ä–∫—É –±—É–¥—É–π—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return AVATAR
    
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.\n"
        "/create - –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚úçÔ∏è\n"
        "/list - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π üìú\n"
        "/show <name> - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ üìñ\n"
        "/delete <name> - –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚ùå"
    )

async def avatar(update: Update, context: CallbackContext):
    # Ensure the user sent an image
    if update.message.photo:
        # Get the highest quality photo (last in the list of photo sizes)
        file = await update.message.photo[-1].get_file()

        # Create a folder for the user's ID
        user_id = update.message.from_user.id
        user_folder = f"avatars/temp_{user_id}"
        os.makedirs(user_folder, exist_ok=True)

        # Specify a temporary name for the file path
        temp_avatar_path = os.path.join(user_folder, f"temp_{user_id}_avatar.jpg")

        # Download the file asynchronously and save it to the specified path
        await file.download_to_drive(temp_avatar_path)

        # Store the temporary file path in the user data for later use
        context.user_data['temp_avatar'] = temp_avatar_path

        # Prompt for name next
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return NAME
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return AVATAR

# Handle the character name input
async def name(update: Update, context: CallbackContext):
    user_name = update.message.text.strip()
    user_id = update.message.from_user.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="",
        database="characters"
    )
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "SELECT COUNT(*) FROM characters WHERE name = %s AND user_id = %s",
        (user_name, user_id)
    )
    result = cursor.fetchone()
    if result[0] > 0:
        # –ï—Å–ª–∏ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –∏–º–µ–Ω–µ–º '{user_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è."
        )
        conn.close()
        return NAME

    # –ï—Å–ª–∏ –∏–º—è —É–Ω–∏–∫–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    context.user_data['name'] = user_name

    # Get the temporary avatar path
    temp_avatar_path = context.user_data.get('temp_avatar')
    if temp_avatar_path:
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_folder = f"avatars/{user_id}"
        os.makedirs(user_folder, exist_ok=True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        new_avatar_path = os.path.join(user_folder, f"{user_name}_avatar.jpg")

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
        os.rename(temp_avatar_path, new_avatar_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞–≤–∞—Ç–∞—Ä—É
        context.user_data['avatar'] = new_avatar_path

    else:
        await update.message.reply_text("–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        conn.close()
        return AVATAR

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π
    conn.close()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return DESCRIPTION


# Handle the character description input
async def description(update: Update, context: CallbackContext):
    user_description = update.message.text
    context.user_data['description'] = user_description
    await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return HEALTH

# Handle the character health input
async def health(update: Update, context: CallbackContext):
    try:
        user_health = int(update.message.text)
        context.user_data['health'] = user_health
        await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return DAMAGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è. –ù–µ –±—É–∫–∞–º–∏")
        return HEALTH

async def damage(update: Update, context: CallbackContext):
    try:
        user_damage = int(update.message.text)
        context.user_data['damage'] = user_damage
        await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return ABILITIES
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–Ω. –ù–µ –±—É–∫–∞–º–∏")
        return DAMAGE
        
# Handle the character abilities input
async def abilities(update: Update, context: CallbackContext):
    user_abilities = update.message.text
    context.user_data['abilities'] = user_abilities
    await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
    return SKILLS

# Handle the character skills input
async def skills(update: Update, context: CallbackContext):
    user_skills = update.message.text
    context.user_data['skills'] = user_skills

    # Save the character to the database
    character = context.user_data
    user_id = update.message.from_user.id  # Get the user ID for saving the character
    character_id = DatabaseManager.save_character_to_db(character, user_id)  # –ü–µ—Ä–µ–¥–∞—á–∞ user_id –≤ —Ñ—É–Ω–∫—Ü–∏—é

    # Send confirmation message with the character info
    message = (
        f"<b>–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"<b>üÜîID:</b> {character_id}\n"  # Include the new ID in the message
        f"<b>üè∑Ô∏è–ò–º—è:</b> {character['name']}\n"
        f"<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ:</b> {character['description']}\n"
        f"<b>‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ:</b> {character['health']}\n"
        f"<b>üî™–£—Ä–æ–Ω:</b> {character['damage']}\n"
        f"<b>üß†–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</b> {character['abilities']}\n"
        f"<b>‚öíÔ∏è–ù–∞–≤—ã–∫–∏:</b> {character['skills']}\n\n"
    )

    # Send the avatar image first
    with open(character['avatar'], 'rb') as avatar_file:
        await update.message.reply_photo(
            photo=avatar_file,
            caption=message,  # Include the character info message
            parse_mode=ParseMode.HTML  # Use HTML for rich text formatting
        )

    await update.message.reply_text(
        "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
    )

    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END
