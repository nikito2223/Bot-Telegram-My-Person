from telegram import Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, ConversationHandler, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
import mysql.connector
import os

class DatabaseManager:
    def create_table():
        conn = mysql.connector.connect(
            host="localhost",
            user="root",       # –õ–æ–≥–∏–Ω MySQL
            password="",       # –ü–∞—Ä–æ–ª—å MySQL
            database="characters"  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        )
        cursor = conn.cursor()
        cursor.execute(''' 
            CREATE TABLE IF NOT EXISTS characters (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id BIGINT NOT NULL,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                health INT,
                abilities TEXT,
                skills TEXT,
                avatar VARCHAR(255),
                damage INT DEFAULT 0
            )
        ''')
        conn.commit()
        conn.close()
        
    def save_character_to_db(character, user_id):
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="characters"
        )
        cursor = conn.cursor()
        cursor.execute('''INSERT INTO characters (user_id, name, description, health, abilities, skills, avatar, damage)
                        VALUES (%s, %s, %s, %s, %s, %s, %s,%s)''',
                    (user_id, character['name'], character['description'], character['health'],
                        character['abilities'], character['skills'], character['avatar'], character['damage']))
        conn.commit()
    
        # Get the ID of the newly inserted character
        character_id = cursor.lastrowid
        conn.close()
        return character_id
    #–ó–¥–µ—Å—å —Å–≤—è–∑–æ–Ω—ã–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    #/delete - 
    async def delete_character(update: Update, context: CallbackContext):
        if len(context.args) != 1:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /delete <id>.")
            return
    
        try:
            character_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
    
        user_id = update.message.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="characters"
        )
        cursor = conn.cursor()
    
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ç–∞–∫–∏–º ID, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cursor.execute("SELECT id FROM characters WHERE id=%s AND user_id=%s", (character_id, user_id))
            character = cursor.fetchone()
    
            if character is None:
                await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
                return
    
            # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            cursor.execute("DELETE FROM characters WHERE id=%s AND user_id=%s", (character_id, user_id))
            conn.commit()
    
            await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        finally:
            cursor.close()
            conn.close()
    #/list
    async def list_characters(update: Update, context: CallbackContext):
        user_id = update.message.from_user.id  # Get the user ID of the person making the request
    
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="characters"
        )
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM characters WHERE user_id=%s", (user_id,))
        characters = cursor.fetchall()
        conn.close()
    
        if characters:
            response = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:\n"
            for character in characters:
                response += f"üÜî {character[0]} - {character[1]}\n"
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /create.")
    #/show -
    async def show_character(update: Update, context: CallbackContext):
        if len(context.args) != 1:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é /show <id>.")
            return
    
        try:
            character_id = int(context.args[0])
        except ValueError:
            await update.message.reply_text("ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
    
        user_id = update.message.from_user.id  # Get the user ID of the person making the request
    
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="characters"
        )
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM characters WHERE id=%s AND user_id=%s", (character_id, user_id))
        character = cursor.fetchone()
        conn.close()
    
        if character:
            avatar_path = character[7]  # Assuming avatar is stored in the 8th column
            user_folder = "avatars/"
            No_avatar_path = os.path.join(user_folder, "NoAvatarce.jpg")
    
            if os.path.exists(avatar_path):
                with open(avatar_path, 'rb') as avatar_file:
                    message = (
                        f"<b>–ü–µ—Ä—Å–æ–Ω–∞–∂:</b> {character[2]}\n\n"
                        f"<b>üÜîID:</b> {character[0]}\n"
                        f"<b>üè∑Ô∏è–ò–º—è:</b> {character[2]}\n"
                        f"<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ:</b> {character[3]}\n"
                        f"<b>‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ:</b> {character[4]}\n"
                        f"<b>üî™–£—Ä–æ–Ω:</b> {character[8]}\n"
                        f"<b>üß†–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</b> {character[5]}\n"
                        f"<b>‚öíÔ∏è–ù–∞–≤—ã–∫–∏:</b> {character[6]}\n"
                    )
                    await update.message.reply_photo(
                        photo=avatar_file,
                        caption=message,
                        parse_mode=ParseMode.HTML
                    )
            else:
                with open(No_avatar_path, 'rb') as No_avatar_path:
                    message = (
                        f"<b>–ü–µ—Ä—Å–æ–Ω–∞–∂:</b> {character[2]}\n\n"
                        f"<b>üÜîID:</b> {character[0]}\n"
                        f"<b>üè∑Ô∏è–ò–º—è:</b> {character[2]}\n"
                        f"<b>üìù–û–ø–∏—Å–∞–Ω–∏–µ:</b> {character[3]}\n"
                        f"<b>‚ù§Ô∏è–ó–¥–æ—Ä–æ–≤—å–µ:</b> {character[4]}\n"
                        f"<b>üî™–£—Ä–æ–Ω:</b> {character[8]}\n"
                        f"<b>üß†–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:</b> {character[5]}\n"
                        f"<b>‚öíÔ∏è–ù–∞–≤—ã–∫–∏:</b> {character[6]}\n"
                    )
                    await update.message.reply_photo(
                        photo=No_avatar_path,
                        caption=message,
                        parse_mode=ParseMode.HTML
                    )
        else:
            await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")

